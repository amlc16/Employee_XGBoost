# -*- coding: utf-8 -*-
"""Group_2_Colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s9LZM-yp1sXW0WM3cblzTIdVI1ARp0Ht
"""

import pandas as pd
import sklearn as sk
import seaborn as sns
import xgboost as xgb
import os
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)
os.chdir("drive")
os.chdir('MyDrive')
os.chdir('Colab Notebooks')
os.listdir()
## What is this doing
df = pd.read_csv("Employee.csv")

df.head()

df.describe()

df.shape
df.info()

!kill -9 -1

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
X = df.iloc[:, :-1]  # Features
y = df.iloc[:, -1]   # Target variable

# Identify categorical columns
categorical_cols = ['Education', 'City', 'Gender', 'EverBenched']

# Separate numerical and categorical columns
numerical_cols = [col for col in X.columns if col not in categorical_cols]

# Apply one-hot encoding to categorical columns
preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', numerical_cols),
        ('cat', OneHotEncoder(), categorical_cols)
    ])

X_transformed = preprocessor.fit_transform(X)

# Split the dataset into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2, random_state=42)

# Initialize XGBoost classifier
model = XGBClassifier()

# Train the model on the training set
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

from xgboost import XGBClassifier, plot_importance, plot_tree
import matplotlib.pyplot as plt
plot_importance(model)
plt.show()

plot_tree(model, num_trees=0, rankdir='LR')  # rankdir='LR' for left-to-right orientation
plt.show()

xgb.plot_importance(model)

df.head()